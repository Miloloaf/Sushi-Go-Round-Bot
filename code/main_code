from PIL import ImageGrab, ImageOps
import os
import time
import win32api, win32con
from numpy import *

## Using this tutorial
## https://code.tutsplus.com/tutorials/how-to-build-a-python-bot-that-can-play-web-games--active-11117
## Game: https://www.miniclip.com/games/sushi-go-round/en/

"""
Bugs:
- Sometimes doesnt order food (Roe)

Required Features:
- Build Exit from Loop

"""


"""

All coordinates assume a screen resolution size of 2560 * 1440, and Firefox maximized
No scrolling
x_pad = 788
y_pad = 345
Play area = x_pad+1, y_pad+1, 1424, 808
"""

# Globals
# ------------

x_pad = 788
y_pad = 225 #328
# os.chdir(os.path.dirname(__file__))


def screenGrab():
    box = (x_pad + 1, y_pad + 1, x_pad + 636, y_pad + 480)
    im = ImageGrab.grab(box)
    # im.save(os.getcwd() + '\\full_snap__' + str(int(time.time())) + '.png', 'PNG')
    # im.show()
    return im


def grab():
    box = (x_pad + 1, y_pad + 1, x_pad + 636, y_pad + 480)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print(a)
    return a


def main():
    pass


if __name__ == '__main__':
    main()


def leftClick():
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,0,0)
    time.sleep(.1)
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,0,0)
    print("Click.")


def leftDown():
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,0,0)
    time.sleep(.1)
    print ("left Down")


def leftUp():
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,0,0)
    time.sleep(.1)
    print("left release")


def mousePos(cord):
    win32api.SetCursorPos((x_pad + cord[0], y_pad + cord[1]))


def get_cords():
    x,y = win32api.GetCursorPos()
    x = x - x_pad
    y = y - y_pad
    print (x,y)


def startGame():
    #location of first menu
    mousePos((321, 198))
    leftClick()
    time.sleep(.2)

    #location of second menu
    mousePos((312, 392))
    leftClick()
    time.sleep(.2)

    #location of third menu
    mousePos((578, 454))
    leftClick()
    time.sleep(.2)

    #location of fourth menu
    mousePos((311,368))
    leftClick()
    time.sleep(.2)

# startGame()


class Cord:

    f_shrimp = (46,331)
    f_rice = (90,331)
    f_nori = (44,376)
    f_roe = (79, 380)
    f_salmon = (47, 432)
    f_unagi = (101, 434)

# --------------------

    phone = (572, 357)

    menu_toppings = (527, 270)

    t_shrimp = (487, 225)
    t_unagi = (572, 213)
    t_nori = (494, 267)
    t_roe = (571, 278)
    t_salmon = (489, 325)
    t_exit = (590, 331)

    delivery_norm = (492, 295)

    menu_rice = (538, 295)
    buy_rice = (534, 276)

    menu_sake = (536, 310)
    buy_sake = (533, 270)


def clear_tables():
    mousePos((90, 207))
    leftClick()

    mousePos((191, 203))
    leftClick()

    mousePos((283,206))
    leftClick()

    mousePos((383, 204))
    leftClick()

    mousePos((495, 208))
    leftClick()

    mousePos((590, 204))
    leftClick()
    time.sleep(.1)

"""

Recipes:

    onigiri
        2 rice, 1nori
    
    caliroll:
        1 rice, 1 nori, 1 roe
        
    gunkan:
        1 rice, 1 nori, 2 roe
        
    
"""


def makeFood(food):
    if food == "caliroll":
        print ("Making a caliroll")
        foodOnHand["rice"] -= 1
        foodOnHand["nori"] -= 1
        foodOnHand["roe"] -= 1
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_nori)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_roe)
        leftClick()
        time.sleep(.1)
        foldMat()
        time.sleep(1.5)

    elif food == "onigiri":
        foodOnHand["rice"] -= 2
        foodOnHand["nori"] -= 1
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_nori)
        leftClick()
        time.sleep(.05)
        foldMat()
        time.sleep(1.5)

    elif food == "gunkan":
        foodOnHand["rice"] -= 1
        foodOnHand["nori"] -= 1
        foodOnHand["roe"] -= 2
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_nori)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_roe)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_roe)
        leftClick()
        time.sleep(.05)
        foldMat()
        time.sleep(1.5)


def foldMat():
    mousePos((Cord.f_rice[0]+40, Cord.f_rice[1]))
    leftClick()
    time.sleep(0.1)


def buyFood(food):

    if food == "rice":
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_rice)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        if s.getpixel(Cord.buy_rice) != (127,127,127):
            print ("rice is available")
            mousePos(Cord.buy_rice)
            time.sleep(.1)
            leftClick()
            mousePos(Cord.delivery_norm)
            foodOnHand["rice"] += 10
            time.sleep(.2)
            leftClick()
            time.sleep(2.5)
        else:
            print("rice is NOT available")
            mousePos(Cord.t_exit)
            time.sleep(1)
            leftClick()
            buyFood(food)

    elif food == "nori":
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_toppings)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        if s.getpixel(Cord.t_nori) != (109,123,127):
            print ("nori is available")
            mousePos(Cord.t_nori)
            time.sleep(.1)
            leftClick()
            mousePos(Cord.delivery_norm)
            foodOnHand["nori"] += 10
            time.sleep(.2)
            leftClick()
            time.sleep(2.5)
        else:
            print("nori is NOT available")
            mousePos(Cord.t_exit)
            time.sleep(1)
            leftClick()
            buyFood(food)

    elif food == "roe":
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_toppings)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        if s.getpixel(Cord.t_roe) != (33,30,11):
            print("roe is available")
            mousePos(Cord.t_roe)
            time.sleep(.1)
            leftClick()
            mousePos(Cord.delivery_norm)
            foodOnHand["roe"] += 10
            time.sleep(.2)
            leftClick()
            time.sleep(2.5)
        else:
            print("roe is NOT available")
            mousePos(Cord.t_exit)
            leftClick()
            time.sleep(1)
            buyFood(food)

    # mousePos(Cord.phone)
    #
    # mousePos(Cord.menu_toppings)
    #
    # mousePos(Cord.t_shrimp)
    # mousePos(Cord.t_nori)
    # mousePos(Cord.t_roe)
    # mousePos(Cord.t_salmon)
    # mousePos(Cord.t_unagi)
    # mousePos(Cord.t_exit)
    #
    # mousePos(Cord.menu_rice)
    # mousePos(Cord.buy_rice)
    #
    # mousePos(Cord.menu_sake)
    # mousePos(Cord.buy_sake)
    #
    # mousePos(Cord.delivery_norm)


foodOnHand = {'shrimp':5,
              'rice':10,
              'nori':10,
              'roe':10,
              'salmon':5,
              'unagi':5}


def checkFood():
    for i,j in foodOnHand.items():
        if i == "nori" or i == "rice" or i == "roe":
            if j <= 4:
                print("%s is low and needs to be replenished" % i)
                buyFood(i)


def get_seat_one():
    box = (x_pad + 22, y_pad + 62, x_pad+  22 + 62, y_pad + 62 + 14)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print(a)
    im.save(os.getcwd()+r"\seat_one__"+str(int(time.time()))+".png", "PNG")
    # im.save("seat_one__" + str(int(time.time())) + ".png", "PNG")
    # im.show()
    return a


def get_seat_two():
    box = (x_pad + 123, y_pad + 62, x_pad + 123 + 62, y_pad + 62 + 14)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print(a)
    im.save(os.getcwd()+r"\seat_two__"+str(time.time())+".png","PNG")
    # im.show()
    return a


def get_seat_three():
    box = (x_pad + 224, y_pad + 62, x_pad + 224 + 62, y_pad + 62 + 14)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    # im.show()
    print(a)
    im.save(os.getcwd()+r"\seat_three__"+str(time.time())+".png", "PNG")
    return a


def get_seat_four():
    box = (x_pad + 325,y_pad + 62, x_pad + 325 + 62, y_pad + 62 + 14)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print(a)
    im.save(os.getcwd()+r"\seat_four__"+str(time.time())+".png","PNG")
    # im.show()
    return a


def get_seat_five():
    box = (x_pad + 426, y_pad + 62, x_pad + 426 + 62, y_pad + 62 + 14)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print(a)
    im.save(os.getcwd()+r"\seat_five__"+str(time.time())+".png","PNG")
    # im.show()
    return a


def get_seat_six():
    box = (x_pad + 527, y_pad + 62, x_pad + 527 + 62, y_pad + 62 + 14)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print(a)
    im.save(os.getcwd() + r"\seat_six__" + str(time.time()) + ".png", "PNG")
    # im.show()
    return a


def get_all_seats():
    get_seat_one()
    get_seat_two()
    get_seat_three()
    get_seat_four()
    get_seat_five()
    get_seat_six()


sushiTypes = {2537: "gunkan",
              3003: "caliroll",
              2530: "onigiri"}


class blank:
    seat_1 = 6448
    seat_2 = 5721
    seat_3 = 10401
    seat_4 = 10473
    seat_5 = 6820
    seat_6 = 8781


def check_bubs():

    checkFood()
    s1 = get_seat_one()
    if s1 != blank.seat_1:
        if s1 in sushiTypes:
            print("table 1 is occupied and needs %s" % sushiTypes[s1])
            makeFood(sushiTypes[s1])
        else:
            print("sushi not found!\n sushiType = %i" % s1)

    else:
        print("Table 1 unoccupied")

    clear_tables()
    checkFood()
    s2 = get_seat_two()
    if s2 != blank.seat_2:
        if s2 in sushiTypes:
            print ("table 2 is occupied and needs %s" % sushiTypes[s2])
            makeFood(sushiTypes[s2])
        else:
            print("sushi not found!\n sushiType = %i" % s2)

    else:
        print("Table 2 unoccupied")

    checkFood()
    s3 = get_seat_three()
    if s3 != blank.seat_3:
        if s3 in sushiTypes:
            print("table 3 is occupied and needs %s" % sushiTypes[s3])
            makeFood(sushiTypes[s3])
        else:
            print("sushi not found!\n sushiType = %i" % s3)

    else:
        print("Table 3 unoccupied")

    checkFood()
    s4 = get_seat_four()
    if s4 != blank.seat_4:
        if s4 in sushiTypes:
            print("table 4 is occupied and needs %s" % sushiTypes[s4])
            makeFood(sushiTypes[s4])
        else:
            print("sushi not found!\n sushiTypes = %i" % s4)

    else:
        print("Table 4 unoccupied")

    clear_tables()
    checkFood()
    s5 = get_seat_five()
    if s5 != blank.seat_5:
        if s5 in sushiTypes:
            print("table 5 is occupied and needs %s" % sushiTypes[s5])
            makeFood(sushiTypes[s5])
        else:
            print("sushi not found! \n sushiTypes = %i" % s5)

    else:
        print("Table 5 unoccupied")

    checkFood()
    s6 = get_seat_six()
    if s6 != blank.seat_6:
        if s6 in sushiTypes:
            print("table 6 is occupied and needs %s" % sushiTypes[s6])
            makeFood(sushiTypes[s6])
        else:
            print("sushi not found! \n sushiTypes = %i" % s6)

    else:
        print("Table 6 unoccupied")

    clear_tables()


def main():
    startGame()
    try:
        while True:
            check_bubs()
    except KeyboardInterrupt:
        print("NOOOOO")
        pass

"""
get_all_seats()
2537 - Gunkan
3003 - Cali
2530 - Onigiri

get_all_seats() - Blank
6448
5721
10401
10473
6820
8781
"""

"""
im.getpixel(Cord.t_nori)
(109, 123, 127)
im.getpixel(Cord.t_roe)
(33, 30, 11)
im.getpixel(Cord.t_salmon)
(127, 61, 0)
im.getpixel(Cord.t_shrimp)
(127, 127, 127)
im.getpixel(Cord.t_unagi)
(127, 71, 47)
im.getpixel(Cord.buy_rice)
(127, 127, 127)
im.getpixel(Cord.buy_sake)
(0, 0, 0)

"""
"""

Plate Cords:

    90, 107
    191, 103
    283, 106
    383, 104
    495, 108
    602, 104

"""
